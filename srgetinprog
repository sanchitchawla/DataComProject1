#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import socket as soc 
import os
import logging
from urlparse import urlparse

class downloadpls():

    def __init__(self):
        self.prevLast = ""
        self.prevConlen = 0
        self.prevEtag = ""
        self.sanchit = "sanchit"
        self.HOST = ""
        self.PORT = 80
        self.filename = ""
        self.socket = soc.socket(soc.AF_INET, soc.SOCK_STREAM)
        self.headersend = ""
        self.resumesend = ""
        self.header = ""
        self.body = ""
        self.downloadedsofar = 0
        self.PATH = ""
        self.lastMod = ""
        self.conlength = 0
        self.ETag = ""
        #self.redirect= False
        self.url=""
        self.urled=""
        self.thread=0
    
    # def checkredirect(self):
    #     self.redirectheader()
    #     text = ""
    #     while True:
    #         recv = self.socket.recv(2048)
    #         text += recv

    #         if "\r\n\r\n" in text:
    #             self.rheader, bs = text.split("\r\n\r\n")
    #             everything = self.rheader.split("\r\n")
    #             if "301" in everything[0] or "302" in everything[0]:
    #                 self.redirect=True
    #                 print everything[3]
    #                 idc,self.url = everything[3].split(": ")
    #                 print self.url
    #                 self.urled = urlparse(self.url)
    #                 self.HOST = self.urled.hostname
    #                 self.PATH = self.urled.path
    #                 self.PORT = self.urled.port
    #                 if self.PATH=="" or self.PATH== None:
    #                     self.PATH="/"
    #                 if self.PORT== None:
    #                     self.PORT=80
    #                 break
    #             else:
    #                break

    def redirectheader(self):
        self.headersend = "HEAD " + self.PATH + " HTTP/1.1\r\n" + "Host: " + self.HOST + "\r\n\r\n"
        print self.headersend
        self.socket.send(self.headersend)

    def sendheader(self):
        self.headersend = "GET " + self.PATH + " HTTP/1.1\r\n" + "Host: " + self.HOST + "\r\n\r\n"
        self.socket.send(self.headersend)

    def sendresumeheader(self):
        self.resumesend = "GET " + self.PATH + " HTTP/1.1\r\n" + "Host: " + self.HOST +\
         "\r\nRange: bytes=" + str(self.downloadedsofar) + "-" + "\r\n\r\n"
        print self.resumesend
        self.socket.send(self.resumesend)

    def condition(self):
        with open("meta.txt", 'r') as meta:
            read = meta.read()
            self.downloadedsofar = os.path.getsize(self.filename + self.sanchit)
            prev = self.extractdata(read)
            self.prevConlen = prev[0]
            self.prevLast = prev[1]
            self.prevEtag = prev[2]
        return self.prevConlen == self.conlength and self.prevLast == self.lastMod and self.prevEtag == self.ETag


    def extractdata(self, header):
        haha = header.split("\r\n")
        prevCon,prevLast,prevEtag=" ", " ", " "
        for each in haha:
            try:
                if "Content-Length" in each:
                    idc, prevCon = each.split(" ")
                if "Last-Modified" in each:
                    idcc, prevLast = each.split(": ")
                if "ETag" in each:
                    idccc, prevEtag = each.split(" ")
            except Exception as e:
                print "Server doesn't support resuming."
                sys.exit()
        return prevCon,prevLast,prevEtag

    def download(self):
        text = ""
        while True:
            recv = self.socket.recv(2048)
            if not recv: break
            text += recv

            if "\r\n\r\n" in text:
                print "Regular Download"
                self.header, self.body = text.split("\r\n\r\n")
                prevstuff = self.extractdata(self.header)
                self.conlength = int(prevstuff[0])
                self.lastMod = prevstuff[1]
                self.ETag = prevstuff[2]
                info = '{}: {}\r\n{}: {}\r\n{}: {}\r\n'.format('Content-Length', self.conlength,
                 'Last-Modified', self.lastMod, 'ETag', self.ETag)
                break

        with open(self.filename + self.sanchit, 'wb+') as file, open("meta.txt", 'w') as metafile:

            file.write(self.body)
            size = len(self.body)
            metafile.write(info)
            while size < self.conlength:

                recv = self.socket.recv(2048)
                size += len(recv)
                file.write(recv)

                percent = "{0:.2f}".format(
                (size / float(self.conlength)) * 100.0)
                fill = int(
                    round(50 * (size / float(self.conlength))))
                bar = '█' * fill + '-' * (50-fill)
                sys.stdout.write('\rProgress |%s| - %s%s ' % (bar, percent, '%'))
                sys.stdout.flush()


        os.renames(self.filename + self.sanchit, self.filename)
        print "Complete"
        os.remove("meta.txt")
        self.socket.close()
        sys.exit()

    def resume(self):
        text = ""
        while True:
            recv = self.socket.recv(2048)
            if not recv: break
            text += recv

            if "\r\n\r\n" in text:
                print "Resuming."

                self.header, self.body = text.split("\r\n\r\n")
                prevstuff = self.extractdata(self.header)
                self.conlength = int(prevstuff[0])
                break

        with open(self.filename + self.sanchit, 'a') as file:
            downloaded = self.downloadedsofar
            file.write(self.body)
            downloaded+= len(self.body)
            while downloaded < self.downloadedsofar + int(self.conlength):
                
                recv = self.socket.recv(2048)
                downloaded += len(recv)
                file.write(recv)    
                if not recv: break

                percent = "{0:.2f}".format(
                (downloaded / float(self.downloadedsofar + int(self.conlength))) * 100.0)
                fill = int(
                    round(50 * (downloaded / float(self.downloadedsofar + int(self.conlength)))))
                bar = '█' * fill + '-' * (50-fill)
                sys.stdout.write('\rProgress |%s| - %s%s ' % (bar, percent, '%'))
                sys.stdout.flush()


        os.renames(self.filename + self.sanchit, self.filename)
        os.remove("meta.txt")
        print "\r\nDone Downloading."
        self.socket.close()
        sys.exit()

    def main(self, sis):
        self.filename = sis[2]
        self.url = sis[-1]
        if "https" in self.url:
            print "We dont support HTTPS"
            sys.exit() 
        self.urled = urlparse(self.url)
        self.PATH = self.urled.path
        self.HOST = self.urled.hostname
        if self.urled.port != None:
            self.PORT = self.urled.port
        else: self.PORT = 80
        if self.PATH==None or self.PATH=="":
            self.PATH="/"
        self.socket.connect((self.HOST, self.PORT))
        #self.checkredirect()
        if os.path.isfile(self.filename + self.sanchit):

            if not self.condition():

                self.sendresumeheader()
                self.resume()

            else:

                self.sendheader()
                self.download()
        else:
            self.sendheader()
            self.download()


if __name__ == '__main__':
    sis = sys.argv
    start = downloadpls()
start.main(sis)
